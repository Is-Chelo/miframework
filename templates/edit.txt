/* eslint-disable no-shadow */
/* eslint-disable no-unused-vars */
import React from 'react'
import { Formik, Form, Field } from 'formik'
import * as Yup from 'yup'
import {
  Row,
  Card,
  CardBody,
  FormGroup,
  Label,
  Button,
  CardTitle
} from 'reactstrap'
import IntlMessages from 'helpers/IntlMessages'
import { Colxx, Separator } from 'components/common/CustomBootstrap'
import { useHistory } from 'react-router-dom'
import { FormikSwitch } from 'containers/form-validations/FormikFields'
import Breadcrumb from 'containers/navs/Breadcrumb'

import 'rc-switch/assets/index.css'
import Peticion from 'helpers/Peticiones'

const SignupSchema = Yup.object().shape({
  {camposRequeridos}
})

const Edit = ({ match, location }) => {
  const history = useHistory()
  console.log(match.params.id)
  // console.log(location.row)
  // const data = location.row
  const baseUrl = `/{endpoint}`
  const peticion = new Peticion(baseUrl)
  const data = new Peticion(`${baseUrl}/${match.params.id}`).getDataId()

  console.log(data)

  const onSubmit = values => {
    peticion.updateItem(data, values)
    setTimeout(() => {
      history.goBack()
    }, 1000)
  }

  return (
    <>
      {data ? (
        <>
          <Row>
            <Colxx xxs="12">
              <Breadcrumb heading="menu.formspayments" match={match} />
              <Button
                color="primary"
                className="mb-2 float-right"
                onClick={() => {
                  history.goBack()
                }}
              >
                <IntlMessages id="form.cancel" />
              </Button>{' '}
              <Separator className="mb-5" />
            </Colxx>
          </Row>
          <Row className="mb-4 justify-content-center">
            <Colxx xxs="6 align-items-center">
              <Card>
                <CardBody>
                  <Formik
                    initialValues={{
                     {initialValue}
                    }}
                    validationSchema={SignupSchema}
                    onSubmit={onSubmit}
                  >
                    {({
                      setFieldValue,
                      setFieldTouched,
                      values,
                      errors,
                      touched
                    }) => (
                      <Form className="av-tooltip tooltip-label-bottom">
                        <Row>
                          <Colxx xxs="12">
                            <CardTitle className="mb-2">
                              <IntlMessages id="form.editFormspayments" />
                              <FormGroup className="form-group float-right">
                                <FormikSwitch
                                  id="tooltip_add_role"
                                  textTooltip={
                                    values.active ? 'Active' : 'Inactive'
                                  }
                                  name="active"
                                  className="custom-switch custom-switch-primary"
                                  value={values.active}
                                  onChange={setFieldValue}
                                  onBlur={setFieldTouched}
                                />
                              </FormGroup>

                              <Separator className="mt-3 mb-5" />
                            </CardTitle>
                          </Colxx>
                        </Row>

                        {formCampos}

                        <Button color="primary" type="submit">
                          <IntlMessages id="form.update" />
                        </Button>
                      </Form>
                    )}
                  </Formik>
                </CardBody>
              </Card>
            </Colxx>
          </Row>
        </>
      ) : (
        <div className="loading" />
      )}
    </>
  )
}
export default Edit
